name: Buildjet

on:
  workflow_dispatch:

jobs:
  build:
    name: BuildJet
    runs-on: ubuntu-latest

    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

    steps:
      - name: Checkout Kernel Source
        uses: actions/checkout@v3

      - name: Setup Timezone & Start Time
        run: |
          echo "BUILD_TIME=$(TZ=Asia/Jakarta date '+%d%m%Y-%H%M')" >> $GITHUB_ENV
          echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV
          sudo ln -sf /usr/share/zoneinfo/Asia/Jakarta /etc/localtime

      - name: Clean Previous Build Output
        run: rm -rf out

      - name: Set Up Dependencies
        run: |
          sudo apt update -y
          sudo apt install -y \
            bc cpio flex bison git python-is-python3 wget curl lz4 \
            build-essential libssl-dev libelf-dev libncurses5-dev zstd \
            device-tree-compiler zip pigz rsync jq nano clang llvm lld \
            gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi ccache

      - name: Download AOSP Clang (Android 14 r487747c)
        run: |
          mkdir clang
          wget -q \
            https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/android-14.0.0_r2/clang-r487747c.tar.gz \
            -O clang.tar.gz
          tar -xf clang.tar.gz -C clang
          rm clang.tar.gz

      - name: Get Clang Version
        id: clang
        run: echo "version=$(./clang/bin/clang --version | head -n1)" >> $GITHUB_OUTPUT

      - name: Set Env Vars
        run: |
          echo "KERNEL_DEFCONFIG=surya_defconfig" >> $GITHUB_ENV
          echo "TOOLCHAIN=${GITHUB_WORKSPACE}/clang" >> $GITHUB_ENV
          echo "PATH=${GITHUB_WORKSPACE}/clang/bin:$PATH" >> $GITHUB_ENV
          echo "BUILD_USER=fannndi" >> $GITHUB_ENV
          echo "BUILD_HOST=android-build" >> $GITHUB_ENV
          echo "ZIP_NAME=NOS-PERF-${{ env.BUILD_TIME }}.zip" >> $GITHUB_ENV

      - name: Telegram Notification ‚Äî Build Started
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="üöÄ *Build Started*\nCompiler: \`${{ steps.clang.outputs.version }}\`" \
            -d parse_mode=Markdown

      - name: Create 4GB Swap
        run: |
          sudo fallocate -l 4G /swapfile && sudo chmod 600 /swapfile
          sudo mkswap /swapfile && sudo swapon /swapfile
          free -h

      - name: Prepare Defconfig
        run: make O=out ARCH=arm64 ${{ env.KERNEL_DEFCONFIG }}

      - name: Build Kernel
        run: |
          export KBUILD_CFLAGS="-Wno-unused-but-set-variable -Wno-incompatible-pointer-types"
          MEM=$(grep MemTotal /proc/meminfo | awk '{print $2}')
          CORES=$(nproc)
          JOBS=$(( (MEM/1024/1024) < 4 ? 2 : (MEM/1024/1024) < 8 ? 4 : CORES+2 ))
          echo "üß± Using -j$JOBS"

          make -j$JOBS O=out \
            ARCH=arm64 \
            LD=ld.lld \
            AS=llvm-as \
            AR=llvm-ar \
            NM=llvm-nm \
            OBJCOPY=llvm-objcopy \
            OBJDUMP=llvm-objdump \
            STRIP=llvm-strip \
            CROSS_COMPILE=aarch64-linux-gnu- \
            CROSS_COMPILE_COMPAT=arm-linux-gnueabi- \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            LLVM=1 LLVM_IAS=1 \
            DTC_EXT=dtc \
            KBUILD_COMPILER_STRING="${{ steps.clang.outputs.version }}" \
            KBUILD_BUILD_USER=${{ env.BUILD_USER }} \
            KBUILD_BUILD_HOST=${{ env.BUILD_HOST }} \
            Image.gz dtbs 2>&1 | tee log.txt

          if [[ ! -f out/arch/arm64/boot/Image.gz ]]; then
            echo "‚ùå Build failed or Image.gz missing" && exit 1
          fi

      - name: Combine Image & DTB
        run: |
          cat out/arch/arm64/boot/Image.gz \
            $(find out/arch/arm64/boot/dts -name '*.dtb' | sort -u) \
            > out/arch/arm64/boot/Image.gz-dtb

      - name: Upload Build Log
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-log
          path: log.txt

      - name: Telegram ‚Äî Log if Failure
        if: failure()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument \
            -F chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -F document=@log.txt \
            -F caption="‚ùå *Build Failed*\nCompiler: \`${{ steps.clang.outputs.version }}\`" \
            -F parse_mode=Markdown

      - name: Package Kernel (AnyKernel3)
        if: success()
        run: |
          git clone --depth=1 https://github.com/rinnsakaguchi/AnyKernel3.git -b FSociety AnyKernel3
          cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
          cd AnyKernel3 && zip -r9 ../${{ env.ZIP_NAME }} ./*

      - name: Telegram ‚Äî Build Success
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="‚úÖ *Build Success!*\nUsing: \`${{ steps.clang.outputs.version }}\`" \
            -d parse_mode=Markdown \
          && curl -s -F document=@${{ env.ZIP_NAME }} \
            -F caption="‚úÖ Kernel built with Clang r487747c" \
            -F chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument

      - name: Show Build Stats
        if: success()
        run: |
          echo "üïí Duration: $(( $(date +%s) - ${{ env.BUILD_START }} ))s"
          du -sh "${{ env.ZIP_NAME }}" && sha1sum "${{ env.ZIP_NAME }}"

      - name: Cleanup Swap
        if: always()
        run: sudo swapoff /swapfile
