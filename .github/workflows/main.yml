name: Buildjet

on:
  workflow_dispatch:

jobs:
  build:
    name: BuildJet
    runs-on: ubuntu-latest

    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

    steps:
      - name: Checkout Kernel Source
        uses: actions/checkout@v3

      - name: Prepare Timezone and Build Time
        id: time
        run: |
          echo "BUILD_TIME=$(TZ=Asia/Jakarta date '+%d%m%Y-%H%M')" >> $GITHUB_ENV
          echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV
          sudo rm /etc/localtime
          sudo ln -s /usr/share/zoneinfo/Asia/Jakarta /etc/localtime
        shell: bash

      - name: Clean Previous Build Output (Optional)
        run: rm -rf out
        shell: bash

      - name: Set Up Dependencies
        run: |
          sudo apt update -y
          sudo apt install -y \
            bc cpio flex bison aptitude git python-is-python3 tar perl wget curl lz4 \
            build-essential checkinstall \
            libssl-dev libelf-dev libncurses5-dev libffi-dev libreadline-dev libbz2-dev libsqlite3-dev zlib1g-dev \
            device-tree-compiler \
            git curl wget zip zstd cpio pigz rsync jq \
            nano ca-certificates ssh \
            clang llvm lld gcc g++ \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu gcc-arm-linux-gnueabi \
            python3 \
            ccache git-lfs lzop
        shell: bash

      - name: Clone ZyC Clang
        run: |
          mkdir zyc-clang
          wget "$(curl -s https://raw.githubusercontent.com/ZyCromerZ/Clang/main/Clang-main-link.txt)" -O "zyc-clang.tar.gz"
          tar -C zyc-clang/ -xf zyc-clang.tar.gz && rm -rf zyc-clang.tar.gz
        shell: bash

      - name: Get Clang Version
        id: clang
        run: echo "version=$(./zyc-clang/bin/clang --version | head -n 1)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Set Environment Variables
        run: |
          echo "KERNEL_DEFCONFIG=surya_defconfig" >> $GITHUB_ENV
          echo "TOOLCHAIN=$(pwd)/zyc-clang" >> $GITHUB_ENV
          echo "PATH=$(pwd)/zyc-clang/bin:$PATH" >> $GITHUB_ENV
          echo "BUILD_USER=fannndi" >> $GITHUB_ENV
          echo "BUILD_HOST=android-build" >> $GITHUB_ENV
          echo "ZIP_NAME=NOS-PERF-${{ env.BUILD_TIME }}.zip" >> $GITHUB_ENV
        shell: bash

      - name: Send Telegram Notification - Build Started
        run: |
          curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage \
          -d chat_id=${TELEGRAM_CHAT_ID} \
          -d text="üöÄ *Build Dimulai!*\nUsing *Clang*: ${{ steps.clang.outputs.version }}" \
          -d parse_mode=Markdown
        shell: bash

      - name: Make Defconfig
        run: |
          make O=out ARCH=arm64 ${KERNEL_DEFCONFIG}
        shell: bash

      - name: Build Kernel
        run: |
          export KBUILD_CFLAGS="-Wno-default-const-init-var-unsafe"
          make -j$(nproc) O=out \
            ARCH=arm64 \
            LD=ld.lld \
            AS=llvm-as \
            AR=llvm-ar \
            NM=llvm-nm \
            OBJCOPY=llvm-objcopy \
            OBJDUMP=llvm-objdump \
            STRIP=llvm-strip \
            CROSS_COMPILE=aarch64-linux-gnu- \
            CROSS_COMPILE_COMPAT=arm-linux-gnueabi- \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            LLVM=1 \
            LLVM_IAS=1 \
            DTC_EXT=dtc \
            KBUILD_COMPILER_STRING="${{ steps.clang.outputs.version }}" \
            KBUILD_BUILD_USER=${BUILD_USER} \
            KBUILD_BUILD_HOST=${BUILD_HOST} \
            Image.gz dtbs 2>&1 | tee log.txt
        continue-on-error: true

      - name: Combine Image.gz and DTB
        run: |
          IMG=out/arch/arm64/boot/Image.gz
          DTB=$(find out/arch/arm64/boot/dts -name "*.dtb" | sort | xargs cat)
          if [[ -f $IMG && ! -z "$DTB" ]]; then
            echo "$DTB" > out/arch/arm64/boot/merged.dtb
            cat $IMG out/arch/arm64/boot/merged.dtb > out/arch/arm64/boot/Image.gz-dtb
            echo "‚úÖ Image.gz-dtb successfully created!"
          else
            echo "‚ùå Image.gz or DTBs missing!"
            exit 1
          fi

      - name: Send Telegram Notification - Build Failed (if failed)
        if: failure()
        run: |
          curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument \
            -F chat_id=${TELEGRAM_CHAT_ID} \
            -F document=@log.txt \
            -F caption="‚ùå *Build Gagal!*\nTime: ${{ env.BUILD_TIME }}\nCompiler: ${{ steps.clang.outputs.version }}" \
            -F parse_mode=Markdown
        shell: bash

      - name: Check Kernel Output Files
        run: |
          [[ -f out/arch/arm64/boot/Image.gz-dtb ]] || { echo "‚ùå Missing Image.gz-dtb"; exit 1; }

      - name: Fetch AnyKernel3 and Package
        run: |
          git clone --depth=1 https://github.com/rinnsakaguchi/AnyKernel3.git -b FSociety AnyKernel3
          cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/Image.gz-dtb
          cd AnyKernel3
          zip -r9 ../${ZIP_NAME} ./*
        shell: bash

      - name: Send Telegram Notification - Build Success
        run: |
          curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage \
            -d chat_id=${TELEGRAM_CHAT_ID} \
            -d text="‚úÖ *Build Berhasil!*\nTime: ${{ env.BUILD_TIME }}\nCompiler: ${{ steps.clang.outputs.version }}" \
            -d parse_mode=Markdown
        shell: bash

      - name: Send Kernel Zip to Telegram
        run: |
          curl -F document=@${ZIP_NAME} \
            -F caption="‚úÖ Build Success\n\nUsing: *ZyC-Clang*\nTime: ${{ env.BUILD_TIME }}" \
            -F parse_mode=Markdown \
            "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument?chat_id=${TELEGRAM_CHAT_ID}"
        shell: bash

      - name: Show Build Duration
        run: |
          BUILD_END=$(date +%s)
          DURATION=$((BUILD_END - BUILD_START))
          echo "üïí Build Selesai dalam $((DURATION / 60)) menit $((DURATION % 60)) detik"
        shell: bash
