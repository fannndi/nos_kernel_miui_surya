name: Buildjet

on:
  workflow_dispatch:

jobs:
  build:
    name: BuildJet
    runs-on: ubuntu-latest

    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

    steps:
      - name: Checkout Kernel Source
        uses: actions/checkout@v3

      - name: Setup Timezone
        run: |
          echo "BUILD_TIME=$(TZ=Asia/Jakarta date '+%d%m%Y-%H%M')" >> $GITHUB_ENV
          echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV
          sudo ln -sf /usr/share/zoneinfo/Asia/Jakarta /etc/localtime

      - name: Clean Previous Build Output
        run: rm -rf out

      - name: Set Up Dependencies
        run: |
          sudo apt update -y
          sudo apt install -y \
            bc cpio flex bison aptitude git python-is-python3 tar perl wget curl lz4 \
            build-essential checkinstall \
            libssl-dev libelf-dev libncurses5-dev libffi-dev libreadline-dev libbz2-dev libsqlite3-dev zlib1g-dev \
            device-tree-compiler \
            zip zstd pigz rsync jq nano ssh clang llvm lld gcc g++ \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu gcc-arm-linux-gnueabi \
            python3 ccache git-lfs lzop

      - name: Download AOSP Clang (Android 13 - r450784d)
        run: |
          mkdir clang
          wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/android-13.0.0_r3/clang-r450784d.tar.gz -O clang.tar.gz
          tar -xf clang.tar.gz -C clang
          rm clang.tar.gz

      - name: Get Clang Version
        id: clang
        run: echo "version=$(./clang/bin/clang --version | head -n 1)" >> $GITHUB_OUTPUT

      - name: Set Environment Variables
        run: |
          echo "KERNEL_DEFCONFIG=surya_defconfig" >> $GITHUB_ENV
          echo "TOOLCHAIN=${GITHUB_WORKSPACE}/clang" >> $GITHUB_ENV
          echo "PATH=${GITHUB_WORKSPACE}/clang/bin:$PATH" >> $GITHUB_ENV
          echo "BUILD_USER=fannndi" >> $GITHUB_ENV
          echo "BUILD_HOST=android-build" >> $GITHUB_ENV
          echo "ZIP_NAME=NOS-PERF-${{ env.BUILD_TIME }}.zip" >> $GITHUB_ENV

      - name: Send Telegram Notification - Build Started
        run: |
          curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage \
            -d chat_id=${TELEGRAM_CHAT_ID} \
            -d text="üöÄ *Build Dimulai!*\nUsing *Clang*: \`${{ steps.clang.outputs.version }}\`" \
            -d parse_mode=Markdown

      - name: Tambahkan Swap File (4GB)
        run: |
          sudo fallocate -l 4G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          echo "‚úÖ Swap 4GB aktif"
          free -h

      - name: Make Defconfig
        run: |
          make O=out ARCH=arm64 ${{ env.KERNEL_DEFCONFIG }}

      - name: Build Kernel with Live Log
        run: |
          export KBUILD_CFLAGS="-Wno-default-const-init-var-unsafe"
          free -h
          df -h

          MEM_TOTAL=$(grep MemTotal /proc/meminfo | awk '{print $2}')
          CPU_CORES=$(nproc)
          if [ "$MEM_TOTAL" -le 4000000 ]; then
            JOBS=2
          elif [ "$MEM_TOTAL" -le 8000000 ]; then
            JOBS=4
          elif [ "$MEM_TOTAL" -le 12000000 ]; then
            JOBS=6
          else
            JOBS=$((CPU_CORES + 2))
          fi

          echo "üõ†Ô∏è Using -j$JOBS"

          {
            echo "üîß ===== START BUILD LOG ====="
            make -j$JOBS O=out \
              ARCH=arm64 \
              LD=ld.lld \
              AS=llvm-as \
              AR=llvm-ar \
              NM=llvm-nm \
              OBJCOPY=llvm-objcopy \
              OBJDUMP=llvm-objdump \
              STRIP=llvm-strip \
              CROSS_COMPILE=aarch64-linux-gnu- \
              CROSS_COMPILE_COMPAT=arm-linux-gnueabi- \
              CLANG_TRIPLE=aarch64-linux-gnu- \
              LLVM=1 \
              LLVM_IAS=1 \
              DTC_EXT=dtc \
              KBUILD_COMPILER_STRING="${{ steps.clang.outputs.version }}" \
              KBUILD_BUILD_USER=${{ env.BUILD_USER }} \
              KBUILD_BUILD_HOST=${{ env.BUILD_HOST }} \
              Image.gz dtbs
          } 2>&1 | tee log.txt

          BUILD_RESULT=${PIPESTATUS[0]}

          if [[ $BUILD_RESULT -ne 0 ]]; then
            echo "‚ùå Kernel build failed." | tee -a log.txt
            exit 1
          fi

          if [[ ! -f out/arch/arm64/boot/Image.gz ]]; then
            echo "‚ùå Image.gz not found!" | tee -a log.txt
            exit 1
          fi

          echo "‚úÖ Kernel build completed." | tee -a log.txt

      - name: Combine Image.gz and DTB
        run: |
          IMG=out/arch/arm64/boot/Image.gz
          DTB_DIR=out/arch/arm64/boot/dts
          cat $IMG > out/arch/arm64/boot/Image.gz-dtb
          find $DTB_DIR -name "*.dtb" | sort -u | xargs cat >> out/arch/arm64/boot/Image.gz-dtb
          echo "‚úÖ Image.gz-dtb successfully created!"

      - name: Ensure log.txt exists
        if: always()
        run: |
          [ -f log.txt ] || echo "‚ö†Ô∏è log.txt not found ‚Äî build likely failed early." > log.txt

      - name: Upload Log to GitHub Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: log.txt

      - name: Send Telegram Log if Failed
        if: failure()
        run: |
          curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument \
            -F chat_id="${TELEGRAM_CHAT_ID}" \
            -F document="@log.txt" \
            -F caption="‚ùå *Build Gagal!*\nTime: \`${{ env.BUILD_TIME }}\`\nCompiler: \`${{ steps.clang.outputs.version }}\`" \
            -F parse_mode="Markdown"

      - name: Package Kernel with AnyKernel3
        if: success()
        run: |
          git clone --depth=1 https://github.com/rinnsakaguchi/AnyKernel3.git -b FSociety AnyKernel3
          cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/Image.gz-dtb
          cd AnyKernel3
          zip -r9 ../${{ env.ZIP_NAME }} ./*

      - name: Send Telegram Notification - Build Success
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage \
            -d chat_id=${TELEGRAM_CHAT_ID} \
            -d text="‚úÖ *Build Berhasil!*\nTime: \`${{ env.BUILD_TIME }}\`\nCompiler: \`${{ steps.clang.outputs.version }}\`" \
            -d parse_mode=Markdown

      - name: Send Kernel Zip to Telegram
        if: success()
        run: |
          curl -F document=@${{ env.ZIP_NAME }} \
            -F caption="‚úÖ Build Success\nUsing: *Google Clang r450784d*\nTime: \`${{ env.BUILD_TIME }}\`" \
            -F parse_mode=Markdown \
            "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument?chat_id=${TELEGRAM_CHAT_ID}"

      - name: Show Build Duration
        if: always()
        run: |
          BUILD_END=$(date +%s)
          DURATION=$((BUILD_END - ${{ env.BUILD_START }}))
          echo "üïí Build selesai dalam $((DURATION / 60)) menit $((DURATION % 60)) detik"

      - name: Show Final Zip Info
        if: success()
        run: |
          echo "üìè Size:"
          du -sh "${{ env.ZIP_NAME }}"
          echo "üîê SHA1:"
          sha1sum "${{ env.ZIP_NAME }}"

      - name: Force Success (Override Failure)
        if: always()
        run: echo "‚úÖ Workflow completed (status forced)"
